Metadata-Version: 2.4
Name: springsim
Version: 0.1.0
Summary: Educational mass-spring physics engine with matrix-based integrators.
Author: Codex
Requires-Python: >=3.10
Description-Content-Type: text/markdown
Requires-Dist: numpy>=1.23
Requires-Dist: matplotlib>=3.6
Requires-Dist: scipy>=1.9
Provides-Extra: dev
Requires-Dist: pytest; extra == "dev"
Requires-Dist: black; extra == "dev"
Requires-Dist: ruff; extra == "dev"

# Springsim – Mass–Spring Physics Engine

An educational mass–spring physics engine that assembles global mass (`M`), damping (`C`), and stiffness (`K`) matrices and advances them with matrix-based time integrators. The repository focuses on clarity and linear-algebra-centric implementation rather than game-specific optimisations.

## Features
- `Particle`/`Spring` dataclasses with 2D translational degrees of freedom backed by NumPy arrays.
- Global matrices:
  - Lumped diagonal mass matrix `M`.
  - Rayleigh plus dashpot damping matrix `C`.
  - Linearised stiffness matrix `K` assembled from the spring network.
- Integrators:
  - Semi-implicit (symplectic) Euler.
  - Average-acceleration Newmark–β (β=0.25, γ=0.5) scheme.
- Diagnostics: kinetic, potential, and total energy with CSV logging.
- Matplotlib visualisation for static frames and animations (MP4/GIF fallback or PNG frame sequence).
- CLI demos for a hanging chain and a cloth patch.

## Getting Started
```bash
python -m venv .venv
source .venv/bin/activate
pip install -e .
```

Run the demos via the module invocation or the console scripts:

```bash
# Hanging chain
python -m springsim.demo_chain --n 10 --k 1000 --mass 0.1 --dt 0.002 --steps 5000 --alpha 0.01 --beta 0.001 --out ./out/chain

# Cloth patch
python -m springsim.demo_cloth --nx 15 --ny 10 --k 1200 --mass 0.05 --dt 0.002 --steps 4000 --alpha 0.02 --beta 0.002 --out ./out/cloth
```

Each demo writes:
- `initial.png` / `final.png` snapshots of the configuration.
- `animation.mp4` (falls back to `.gif` or a frame directory if tools are unavailable).
- `energy.csv` with `(step, time, kinetic, potential, total)`.
- Summary statistics in the terminal (max displacement, energy drift, average CPU time per step).

### Switching integrators
Pass `--integrator euler` to use the semi-implicit Euler scheme instead of the Newmark–β default. Euler is faster but more dissipative and less stable for stiff systems.

## Repository Layout
```
springsim/
  __init__.py
  builders.py        # Helper constructors for chain/cloth systems.
  integrators.py     # Semi-implicit Euler and Newmark–β implementations.
  simulation.py      # Energy logging and simulation orchestration.
  system.py          # Matrix assembly, state management, diagnostics.
  types.py           # Dataclasses for particles and springs.
  viz.py             # Plotting utilities and animation helpers.
  demo_chain.py      # CLI demo for a hanging chain.
  demo_cloth.py      # CLI demo for a cloth patch.
```

## Numerical Stability Notes
- The system uses a linear spring stiffness matrix built from the rest configuration. For large deformations, increase damping or reduce the time step.
- The Newmark–β integrator with β=0.25 and γ=0.5 is unconditionally stable for linear problems, but the dashpot/Rayleigh damping coefficients strongly influence oscillations.
- Recommended CFL-style guideline: ensure `dt` satisfies `dt < π * sqrt(m/k)` for the stiffest spring when using semi-implicit Euler.
- If the animation shows high-frequency chatter, increase `--alpha`/`--beta` or the per-spring dashpot (`--damping`).

## Extending
- Add custom external forces by providing a wind callback when constructing a `System`.
- Build new geometries with the helper functions in `springsim.builders` or assemble your own particle/spring lists.
- Swap or extend integrators by implementing the `Integrator` protocol.

## License
MIT (implicit – adjust to your preference).
